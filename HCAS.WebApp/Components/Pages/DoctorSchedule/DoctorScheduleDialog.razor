@using HCAS.Domain.Features.DoctorSchedule
@using HCAS.Shared
@using MudBlazor
@inject DoctorScheduleService doctorScheduleService
@inject ISnackbar Snackbar

<MudDialog Style="min-width: 500px;">
    <DialogContent>
        @if (_loading)
        {
            <div class="d-flex justify-center pa-4">
                <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
            </div>
        }
        else
        {
            <MudText Typo="Typo.h6" Class="mb-4">@(_isEdit ? "Edit Schedule" : "Add Schedule")</MudText>

            <MudForm @ref="form" @bind-IsValid="@_isFormValid" @bind-Errors="@_errors">
                <MudGrid>
                    <MudItem xs="12">
                        <MudSelect T="int?" 
                                   Label="Doctor Name" 
                                   @bind-Value="doctorId" 
                                   Required="true" 
                                   RequiredError="Please select a doctor"
                                   Variant="MudBlazor.Variant.Outlined">
                            <MudSelectItem Value="@((int?)null)" Disabled="true">Select Doctor</MudSelectItem>
                            @foreach (var doctor in Doctors)
                            {
                                <MudSelectItem Value="@((int?)doctor.Id)">@doctor.Name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="12">
                        <MudDatePicker Label="Schedule Date" 
                                       @bind-Date="scheduleDate" 
                                       Required="true" 
                                       RequiredError="Please select a schedule date"
                                       MinDate="DateTime.Today" 
                                       Placeholder="Select schedule date"
                                       Variant="MudBlazor.Variant.Outlined" />
                    </MudItem>

                    <MudItem xs="12">
                        <MudNumericField T="int?"
                                         Label="Maximum Patients" 
                                         @bind-Value="maxPatients"
                                         Required="true" 
                                         RequiredError="Please enter maximum patients"
                                         Min="1" 
                                         Max="100" 
                                         Placeholder="Enter maximum number of patients"
                                         Variant="MudBlazor.Variant.Outlined" />
                    </MudItem>
                </MudGrid>

                @if (_errors.Length > 0)
                {
                    <MudAlert Severity="Severity.Error" Class="mt-3">
                        @foreach (var error in _errors)
                        {
                            <div>@error</div>
                        }
                    </MudAlert>
                }
            </MudForm>
        }
    </DialogContent>

    <DialogActions>
        <MudButton Color="Color.Secondary" OnClick="Cancel" Disabled="_loading">Cancel</MudButton>
        <MudButton Color="Color.Primary" 
                   OnClick="SaveSchedule" 
                   Disabled="@(!_isFormValid || _loading)"
                   Variant="MudBlazor.Variant.Filled">
            @if (_loading)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                <MudText Class="ms-2">Saving...</MudText>
            }
            else
            {
                <MudText>Save</MudText>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public DoctorScheduleResModel? Schedule { get; set; }

    private List<DoctorModel> Doctors = new List<DoctorModel>();
    private DateTime? scheduleDate;
    private int? doctorId;
    private int? maxPatients;
    private bool _loading = false;
    private bool _isEdit => Schedule is not null;
    private bool _isFormValid = false;
    private string[] _errors = Array.Empty<string>();
    private MudForm form = default!;

    protected override async Task OnInitializedAsync()
    {
        _loading = true;

        if (_isEdit && Schedule is not null)
        {
            doctorId = Schedule.DoctorId;
            scheduleDate = Schedule.ScheduleDate;
            maxPatients = Schedule.MaxPatients;
        }
        else
        {
            scheduleDate = DateTime.Today.AddDays(1); // Default to tomorrow
            doctorId = null;
            maxPatients = null;
        }

        var result = await doctorScheduleService.GetDoctors();
        Doctors = result?.ToList() ?? new List<DoctorModel>();

        _loading = false;
        StateHasChanged();
    }

    private async Task SaveSchedule()
    {
        await form.Validate();
        
        if (!_isFormValid)
            return;

        // Validate required fields manually since form validation might not catch nullable issues
        if (!doctorId.HasValue)
        {
            Snackbar.Add("Please select a doctor", Severity.Error);
            return;
        }

        if (!scheduleDate.HasValue)
        {
            Snackbar.Add("Please select a schedule date", Severity.Error);
            return;
        }

        if (!maxPatients.HasValue || maxPatients.Value <= 0)
        {
            Snackbar.Add("Please enter a valid number of maximum patients", Severity.Error);
            return;
        }

        _loading = true;

        var scheduleModel = new DoctorScheduleReqModel
        {
            DoctorId = doctorId.Value,
            ScheduleDate = scheduleDate.Value,
            MaxPatients = maxPatients.Value
        };

        Result<DoctorScheduleResModel> result;
        if (_isEdit && Schedule is not null)
        {
            result = await doctorScheduleService.UpdateScheduleAsync(Schedule.Id, scheduleModel);
        }
        else
        {
            result = await doctorScheduleService.CreateScheduleAsync(scheduleModel);
        }

        _loading = false;

        if (result.IsSuccess)
        {
            Snackbar.Add(result.Message, Severity.Success);
            MudDialog.Close(DialogResult.Ok(true));
        }
        else
        {
            Snackbar.Add(result.Message, Severity.Error);
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }
}